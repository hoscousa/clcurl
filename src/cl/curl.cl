
typedef long trit_t;

#define NUMBER_OF_ROUNDS 27
#define HASH_LENGTH 243
#define STATE_LENGTH HASH_LENGTH*3

#define __TRUTH_TABLE 1, 0, -1, 1, -1, 0, -1,  1,  0
#define SPI 364

__constant trit_t TRUTH_TABLE[9] = { __TRUTH_TABLE };
__constant size_t state_length = STATE_LENGTH;

__constant trit_t ol2[] = {243, 243};
__constant trit_t second[HASH_LENGTH*3] = {-1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, 1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, 0, -1, 1, 1, 0, 0, -1, 1, 0, 0, 0, -1, -1, 1, 0, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 0, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 0, 0, 0, -1, -1, -1, 1, 1, -1, 1, -1, 0, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, -1, 1, 1, -1, 1, 0, -1, -1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, -1, -1, -1, 0, 0, -1, -1, 0, -1, 0, -1, -1, 1, 0, 0, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, -1, 0, 1, 0, -1, -1, 0, -1, 1, 0, 1, 1, -1, -1, 0, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, 1, 1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 1, -1, 1, 0, -1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 0, -1, -1, 0, -1, -1, 1, -1, 1, 0, -1, 0, -1, -1, 1, -1, 0, 1, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 1, 0, 1, -1, 0, -1, 1, 0, 0, 0, -1, 1, 1, -1, 1, 0, 1, -1, 0, 0, 1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 1, -1, -1, -1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, 1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, 0, -1, 0, -1, 1, 1, -1, -1, -1, 1, 1, -1, 0, -1, 0, 0, -1, 1, -1, -1, -1, 1, -1, -1, 1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, -1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, -1, 0, -1, 1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, 1, 0, 0, -1, 1, -1, 1, -1, -1, 0, 1, 1, -1, 0, -1, 1, 1, -1, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, 0, -1, 1, 0, -1, 1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, 1, 1, -1, -1, 1, -1, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1, 0, 1, -1, 0, -1, -1, 1, 1, -1, -1, 0, -1, 1, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, 1, 1, 0, -1, 1, 0, -1, 1, 1, -1, 1, 0, 1, -1, 1, 0, 0, 0, -1, 1, -1, 0, -1, 0, 0, -1, -1, 1, -1, 0, -1, 0, -1, -1, -1, 1, -1, 1, -1, 0, 1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 0, -1, 0, -1, 1, 0, 1, -1, 1, 0, 1, 0, 1, 1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 1, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 0, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, 0, -1, -1, -1, 1, 1, 0, -1, 0, 1, 0, -1, -1};
//__constant trit_t second[HASH_LENGTH*3] = {-1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, 1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, 0, -1, 1, 1, 0, 0, -1, 1, 0, 0, 0, -1, -1, 1, 0, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 0, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 0, 0, 0, -1, -1, -1, 1, 1, -1, 1, -1, 0, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, -1, 1, 1, -1, 1, 0, -1, -1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, -1, -1, -1, 0, 0, -1, -1, 0, -1, 0, -1, -1, 1, 0, 0, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, -1, 0, 1, 0, -1, -1, 0, -1, 1, 0, 1, 1, -1, -1, 0, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, 1, 1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 1, -1, 1, 0, -1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 0, -1, -1, 0, -1, -1, 1, -1, 1, 0, -1, 0, -1, -1, 1, -1, 0, 1, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 1, 0, 1, -1, 0, -1, 1, 0, 0, 0, -1, 1, 1, -1, 1, 0, 1, -1, 0, 0, 1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 1, -1, -1, -1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, 1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, 0, -1, 0, -1, 1, 1, -1, -1, -1, 1, 1, -1, 0, -1, 0, 0, -1, 1, -1, -1, -1, 1, -1, -1, 1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, -1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, -1, 0, -1, 1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, 1, 0, 0, -1, 1, -1, 1, -1, -1, 0, 1, 1, -1, 0, -1, 1, 1, -1, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, 0, -1, 1, 0, -1, 1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, 1, 1, -1, -1, 1, -1, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1, 0, 1, -1, 0, -1, -1, 1, 1, -1, -1, 0, -1, 1, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, 1, 1, 0, -1, 1, 0, -1, 1, 1, -1, 1, 0, 1, -1, 1, 0, 0, 0, -1, 1, -1, 0, -1, 0, 0, -1, -1, 1, -1, 0, -1, 0, -1, -1, -1, 1, -1, 1, -1, 0, 1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 0, -1, 0, -1, 1, 0, 1, -1, 1, 0, 1, 0, 1, 1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 1, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 0, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, 0, -1, -1, -1, 1, 1, 0, -1, 0, 1, 0, -1, -1};
__constant trit_t first[729] = {-1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, 1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, 0, -1, 1, 1, 0, 0, -1, 1, 0, 0, 0, -1, -1, 1, 0, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1,0, 0, 1, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 0, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 0, 0, 0, -1, -1, -1, 1, 1, -1, 1, -1, 0, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, -1, 1, 1, -1, 1, 0, -1, -1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, -1, -1, -1, 0, 0, -1, -1, 0, -1, 0, -1, -1, 1, 0, 0, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, -1, 0, 1, 0, -1, -1, 0, -1, 1, 0, 1, 1, -1, -1, 0, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, 1, 1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 1, -1, 1, 0, -1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 0, -1, -1, 0, -1, -1, 1, -1, 1, 0, -1, 0, -1, -1, 1, -1, 0, 1, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 1, 0, 1, -1, 0, -1, 1, 0, 0, 0, -1, 1, 1, -1, 1, 0, 1, -1, 0, 0, 1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 1, -1, -1, -1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, 1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, 0, -1, 0, -1, 1, 1, -1, -1, -1, 1, 1, -1, 0, -1, 0, 0, -1, 1, -1, -1, -1, 1, -1, -1, 1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, -1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, -1, 0, -1, 1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, 1, 0, 0, -1, 1, -1, 1, -1, -1, 0, 1, 1, -1, 0, -1, 1, 1, -1, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, 0, -1, 1, 0, -1, 1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, 1, 1, -1, -1, 1, -1, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1, 0, 1, -1, 0, -1, -1, 1, 1, -1, -1, 0, -1, 1, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, 1, 1, 0, -1, 1, 0, -1, 1, 1, -1, 1, 0, 1, -1, 1, 0, 0, 0, -1, 1, -1, 0, -1, 0, 0, -1, -1, 1, -1, 0, -1, 0, -1, -1, -1, 1, -1, 1, -1, 0, 1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 0, -1, 0, -1, 1, 0, 1, -1, 1, 0, 1, 0, 1, 1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 1, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 0, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, 0, -1, -1, -1, 1, 1, 0, -1, 0, 1, 0, -1, -1};

__constant trit_t last[729] = {-1, 1, 0, 1, -1, 1, 0, 0, -1, -1, 1, -1, 0, 0, 1, 0, 1, 1, 0, 0, -1, -1, -1, 0, -1, 1, -1, 0, 0, -1, 1, 1, 0, 0, -1, 1, 0, 0, 0, -1, -1, 1, 0, -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, -1, -1, -1, 1, 1, 1, 1, 0, 0, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 0, 1, 0, 0, 0, -1, -1, -1, 1, 1, -1, 1, -1, 0, -1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, -1, 1, 1, -1, 1, 0, -1, -1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 0, 1, 0, 1, 1, -1, -1, -1, 0, 0, -1, -1, 0, -1, 0, -1, -1, 1, 0, 0, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, -1, 0, -1, 0, 1, 0, -1, -1, 0, -1, 1, 0, 1, 1, -1, -1, 0, -1, 1, 0, 1, 1, 0, -1, 1, -1, 1, 0, 1, 1, -1, 1, -1, 0, 0, -1, -1, 0, -1, 1, -1, 1, 0, -1, -1, -1, -1, 0, 0, 1, 1, -1, -1, 1, -1, 0, -1, -1, 0, -1, -1, 1, -1, 1, 0, -1, 0, -1, -1, 1, -1, 0, 1, -1, -1, -1, 0, 0, 0, -1, 0, -1, -1, -1, -1, 1, 0, 1, -1, 0, -1, 1, 0, 0, 0, -1, 1, 1, -1, 1, 0, 1, -1, 0, 0, 1, -1, 0, 1, -1, 0, -1, 0, 0, 1, 0, 1, 0, 1, -1, -1, -1, -1, 1, 0, 0, 1, 1, 0, -1, -1, 1, 1, -1, 1, -1, 0, -1, -1, -1, -1, -1, 1, -1, 1, 1, 0, -1, 0, -1, 1, 1, -1, -1, -1, 1, 1, -1, 0, -1, 0, 0, -1, 1, -1, -1, -1, 1, -1, -1, 1, 0, -1, 1, 1, -1, -1, 0, 0, 0, -1, 1, 1, 0, 0, 1, 1, -1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, -1, 1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 1, -1, 0, -1, 1, -1, -1, 0, 0, 0, 1, -1, 1, -1, 1, 1, 0, 0, -1, 1, -1, 1, -1, -1, 0, 1, 1, -1, 0, -1, 1, 1, -1, 1, -1, 0, 1, 0, 1, 0, -1, -1, 0, 1, 0, 0, -1, 1, -1, 0, 0, 0, 0, 1, 1, 1, 0, -1, -1, 0, -1, 1, 0, -1, 1, -1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, -1, 1, 1, -1, 0, 0, 0, 0, -1, 0, -1, -1, -1, 1, 1, -1, -1, 1, -1, 0, -1, 0, 0, -1, -1, -1, 0, -1, 0, 0, 1, 0, 1, 1, -1, 0, 0, 0, 0, 0, 1, 1, 0, 0, -1, -1, 0, 0, 0, -1, -1, 0, -1, -1, -1, 0, 0, 0, 1, 0, 1, -1, 0, -1, -1, 1, 1, -1, -1, 0, -1, 1, 0, 0, 0, -1, 0, 1, 1, 0, 0, 0, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, 0, 0, 0, 0, 1, 1, -1, 0, 1, 1, 0, -1, 1, 0, -1, 1, 1, -1, 1, 0, 1, -1, 1, 0, 0, 0, -1, 1, -1, 0, -1, 0, 0, -1, -1, 1, -1, 0, -1, 0, -1, -1, -1, 1, -1, 1, -1, 0, 1, -1, -1, -1, 1, 0, 1, 0, 1, 0, 0, -1, 0, 1, 0, 1, 1, -1, 0, -1, 0, -1, 0, -1, 1, 0, 1, -1, 1, 0, 1, 0, 1, 1, 1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, -1, 0, -1, 0, 0, -1, 0, 0, 1, -1, -1, -1, 0, 0, -1, 1, -1, 0, 0, 0, -1, -1, -1, -1, 0, 0, -1, -1, 1, -1, -1, -1, -1, 0, 0, 0, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 0, 1, 1, 1, 0, -1, 1, 0, 1, -1, 0, 1, 1, -1, 0, -1, -1, -1, 1, 1, 0, -1, 0, 1, 0, -1, -1};

void transform(__global trit_t *state) {
	__private const int id = get_local_id(0)*3;
	size_t r,n;
	int i = 0;
	__private trit_t state_save[3];
	for (r = 0; r <NUMBER_OF_ROUNDS; r++) {
		for(n = 0; n < 3; n++) {
			state_save[n] = state[id + n];
		}
		barrier(CLK_LOCAL_MEM_FENCE);
		for(n = 0; n < 3; n++) {
			int j,k;
			j = id+n;
		       	k = j-1;
			state_save[n] = TRUTH_TABLE[ state[j == 0? 0:(k%2+1)*SPI-(k>>1)] +state[ (j%2+1)*SPI -(j>>1) ] * 3 + 4];
			//if (i == 0) { printf("%d\t%d\t%d \n", j, id1, id2);}
		}
		if (i == 0) { i++;}
		barrier(CLK_LOCAL_MEM_FENCE);
		for(n = 0; n < 3; n++) {
			state[id + n] = state_save[n];
		}
	}
	barrier(CLK_LOCAL_MEM_FENCE);
}

//void printout(trit_t *trit, __constant trit_t *cmp,/* __private size_t *length,*/ __constant char *from) {
void printout(__global trit_t *trit, __constant trit_t *cmp,/* __private size_t *length,*/ __constant char *from) {
	__private const int id = get_local_id(0)*3;
	if(id == 0) printf("\n%s:{",from);
	barrier(CLK_LOCAL_MEM_FENCE);
	for(int i = 0; i < 3; i++) {
		if(trit[id+i] != cmp[id + i])
			printf("%d, ", id + i);
	}
	barrier(CLK_LOCAL_MEM_FENCE);
	if(id == 0) printf("}\n");

}

__kernel void absorb ( 
		__global trit_t *state, 
		__global trit_t *trits,
		__constant size_t *offset,
		__constant size_t *top
		) {
	__private const size_t id = get_local_id(0)*3;
	__private long o = *offset;
	__private long t = *top;
	int i;
	do {
#pragma unroll
		for (i = id; i < id+3; i++) {
			if(i < (t < HASH_LENGTH? t: HASH_LENGTH)) {
				state[i] = trits[o+i];
			}
		}
		transform(state);
		o+= HASH_LENGTH;
	} while ( t - o > 0);
	//printout(state,last,"first absorb state ");
}


__kernel void squeeze (
		__global trit_t *state,
		__global trit_t *trits,
		__global size_t *offset,
		__global size_t *top
		) {
	__private const size_t id = get_local_id(0) * 3;
	__private size_t o = *offset;
	__private size_t t = *top;
	size_t i;
	do {
#pragma unroll
		for (i = id; i < id+3; i++) {
			if(i < (t < HASH_LENGTH? t: HASH_LENGTH)) {
				trits[o+i] = state[i];
			}
		}
		transform(state);
		o += HASH_LENGTH;
	//} while ((l-= HASH_LENGTH) > 0);
	} while (t- o > 0);
}
		/*
		__constant size_t *offset,
		__constant size_t *length
	__private size_t o = *offset;
	__private size_t l = *length;
	//__private const size_t gl_offset = get_global_offset(0) + get_group_id(0);
	__private const int gl_offset = get_global_offset(0);
	__private const int gid = get_group_id(0);
	//if(i==0) printf("\nHello, World, from squeeze kernel %d:%d:%d",gid,gl_offset);
	barrier(CLK_LOCAL_MEM_FENCE);
	if(id==0){
		__private size_t length = state_length;
		//printout(state,&length,"squeeze state ");
	}
		*/
